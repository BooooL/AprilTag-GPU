cmake_minimum_required(VERSION 2.6)
project(Apriltag-demo)

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

option(USE_PROFILE "Enable Profile codes, default to true" 1)
option(USE_CUDA "Use CUDA, default to true" 1)
option(USE_OPENMP "Use OpenMP, default to true" 1)

if (USE_PROFILE)
  add_definitions(-DPROFILE)
endif()

if (USE_CUDA)
  find_package(CUDA)
  if (CUDA_FOUND)
    set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -Xcompiler=\"/FS\" --gpu-architecture=compute_20 --gpu-code=compute_20,sm_20,sm_52")
    set(CUDA_NVCC_FLAGS_RELEASE "${CUDA_NVCC_FLAGS_RELEASE} -O3")
    add_definitions(-DHAVE_CUDA)
    set(CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE OFF)
  else(CUDA_FOUND)
    message("CUDA is not installed on this system.")
  endif()
endif()

find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
set(DEPENDENCIES ${OpenCV_LIBS})
link_directories(${OpenCV_LIB_DIR})
if (NOT USE_CUDA) # OpenCV may set CUDA_FOUND to true
  unset(CUDA_FOUND)
endif()

if (USE_OPENMP)
  find_package(OpenMP)
  if (OPENMP_FOUND)
    include(ProcessorCount)
    ProcessorCount(N)
    if(NOT N EQUAL 0)
      MATH(EXPR N "${N}/2")
    else()
      set(N 2)
    endif()
    MESSAGE(STATUS "Using OpenMP with ${N} threads")
    add_definitions(-DHAVE_OPENMP=${N})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    message("CMAKE_CXX_FLAGS in OpenMP: ${CMAKE_CXX_FLAGS}")
  else(OPENMP_FOUND)
    message("OpenMP is not installed on this system.")
  endif()
endif()

if (APPLE OR UNIX)
  add_compile_options(-std=c++11)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -g -Wsign-compare -frounding-math -fPIC")
else ()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /Zi")
  set(CMAKE_CXX_FLAGS_RELEASE "/Gs ${CMAKE_CXX_FLAGS_RELEASE}")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /DEBUG")
  set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG")
endif()

if (MSVC)
  add_subdirectory(windows)
  include_directories(windows)
  set(DEPENDENCIES ${DEPENDENCIES} windows_port)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4819")  # skip the unicode warnings
endif()

include_directories(include)
add_subdirectory(src)
add_subdirectory(PInvokeExample)
